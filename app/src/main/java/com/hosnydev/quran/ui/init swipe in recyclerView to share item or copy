
    public static Bitmap getBitmapFromVectorDrawable(Context context, int drawableId) {
        Drawable drawable = ContextCompat.getDrawable(context, drawableId);
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
            drawable = (DrawableCompat.wrap(drawable)).mutate();
        }

        Bitmap bitmap = Bitmap.createBitmap(drawable.getIntrinsicWidth(),
                drawable.getIntrinsicHeight(), Bitmap.Config.ARGB_8888);
        Canvas canvas = new Canvas(bitmap);
        drawable.setBounds(0, 0, canvas.getWidth(), canvas.getHeight());
        drawable.draw(canvas);

        return bitmap;
    }

    /**
     * method to init swipe in recyclerView to share item or copy
     */
    private void initSwipe() {

        Bitmap bitmapCopy = getBitmapFromVectorDrawable(MainActivity.this, R.drawable.ic_copy_h);
        Bitmap bitmapShare = getBitmapFromVectorDrawable(MainActivity.this, R.drawable.ic_share_h);


        new com.hosnydev.quran.utils.SwipeHelper(MainActivity.this, recyclerView) {
            @Override
            public void instantiateUnderlayButton(RecyclerView.ViewHolder viewHolder, List<UnderlayButton> underlayButtons) {

                underlayButtons.add(new UnderlayButton(
                        "مشاركة",
                        bitmapShare,
                        Color.parseColor("#008577"),
                        pos -> {
                            Intent shareIntent = new Intent(Intent.ACTION_SEND);
                            shareIntent.setType("text/plain");
                            shareIntent.putExtra(Intent.EXTRA_TEXT, viewHolder.itemView.getTag(R.string.tag)
                                    + "\n \n لتنزيل التطبييق يرجى تحميلة من الرابط التالى"
                                    + "\n \n https://play.google.com/store/apps/details?id=com.hosnydev.quran");
                            startActivity(Intent.createChooser(shareIntent, "Share..."));
                            adapterQuran.notifyDataSetChanged();
                        }
                ));
                underlayButtons.add(new UnderlayButton(
                        "نسخ",
                        bitmapCopy,
                        Color.parseColor("#00574B"),
                        pos -> {
                            ClipboardManager clipboard = (ClipboardManager) getSystemService(CLIPBOARD_SERVICE);
                            ClipData clip = ClipData.newPlainText("label", viewHolder.itemView.getTag(R.string.tag).toString());
                            clipboard.setPrimaryClip(clip);
                            Toast.makeText(MainActivity.this, "تم النسخ", Toast.LENGTH_SHORT).show();
                            adapterQuran.notifyDataSetChanged();
                        }
                ));
            }
        };
    }

    public abstract class SwipeHelper extends ItemTouchHelper.SimpleCallback {

        private static final int BUTTON_WIDTH = 300;
        private RecyclerView recyclerView;
        private List<com.hosnydev.quran.utils.SwipeHelper.UnderlayButton> buttons;
        private GestureDetector gestureDetector;
        private int swipedPos = -1;
        private float swipeThreshold = 0.5f;
        private Map<Integer, List<com.hosnydev.quran.utils.SwipeHelper.UnderlayButton>> buttonsBuffer;
        private Queue<Integer> recoverQueue;

        protected SwipeHelper(Context context, RecyclerView recyclerView) {
            super(0, ItemTouchHelper.LEFT);
            this.recyclerView = recyclerView;
            this.buttons = new ArrayList<>();
            GestureDetector.SimpleOnGestureListener gestureListener = new GestureDetector.SimpleOnGestureListener() {
                @Override
                public boolean onSingleTapConfirmed(MotionEvent e) {
                    for (com.hosnydev.quran.utils.SwipeHelper.UnderlayButton button : buttons) {
                        if (button.onClick(e.getX(), e.getY()))
                            break;
                    }

                    return true;
                }
            };
            this.gestureDetector = new GestureDetector(context, gestureListener);
            View.OnTouchListener onTouchListener = (view, e) -> {
                if (swipedPos < 0) return false;
                Point point = new Point((int) e.getRawX(), (int) e.getRawY());

                RecyclerView.ViewHolder swipedViewHolder = recyclerView.findViewHolderForAdapterPosition(swipedPos);
                View swipedItem = swipedViewHolder.itemView;
                Rect rect = new Rect();
                swipedItem.getGlobalVisibleRect(rect);

                if (e.getAction() == MotionEvent.ACTION_DOWN || e.getAction() == MotionEvent.ACTION_UP || e.getAction() == MotionEvent.ACTION_MOVE) {
                    if (rect.top < point.y && rect.bottom > point.y)
                        gestureDetector.onTouchEvent(e);
                    else {
                        recoverQueue.add(swipedPos);
                        swipedPos = -1;
                        recoverSwipedItem();
                    }
                }
                return false;
            };
            this.recyclerView.setOnTouchListener(onTouchListener);
            buttonsBuffer = new HashMap<>();
            recoverQueue = new LinkedList<Integer>() {
                @Override
                public boolean add(Integer o) {
                    if (contains(o))
                        return false;
                    else
                        return super.add(o);
                }
            };

            attachSwipe();
        }


        @Override
        public boolean onMove(RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, RecyclerView.ViewHolder target) {
            return false;
        }

        @Override
        public void onSwiped(RecyclerView.ViewHolder viewHolder, int direction) {
            int pos = viewHolder.getAdapterPosition();

            if (swipedPos != pos)
                recoverQueue.add(swipedPos);

            swipedPos = pos;

            if (buttonsBuffer.containsKey(swipedPos))
                buttons = buttonsBuffer.get(swipedPos);
            else
                buttons.clear();

            buttonsBuffer.clear();
            swipeThreshold = 0.5f * buttons.size() * BUTTON_WIDTH;
            recoverSwipedItem();
        }

        @Override
        public float getSwipeThreshold(RecyclerView.ViewHolder viewHolder) {
            return swipeThreshold;
        }

        @Override
        public float getSwipeEscapeVelocity(float defaultValue) {
            return 0.1f * defaultValue;
        }

        @Override
        public float getSwipeVelocityThreshold(float defaultValue) {
            return 5.0f * defaultValue;
        }

        @Override
        public void onChildDraw(Canvas c, RecyclerView recyclerView, RecyclerView.ViewHolder viewHolder, float dX, float dY, int actionState, boolean isCurrentlyActive) {
            int pos = viewHolder.getAdapterPosition();
            float translationX = dX;
            View itemView = viewHolder.itemView;

            if (pos < 0) {
                swipedPos = pos;
                return;
            }

            if (actionState == ItemTouchHelper.ACTION_STATE_SWIPE) {
                if (dX < 0) {
                    List<com.hosnydev.quran.utils.SwipeHelper.UnderlayButton> buffer = new ArrayList<>();

                    if (!buttonsBuffer.containsKey(pos)) {
                        instantiateUnderlayButton(viewHolder, buffer);
                        buttonsBuffer.put(pos, buffer);
                    } else {
                        buffer = buttonsBuffer.get(pos);
                    }

                    assert buffer != null;
                    translationX = dX * buffer.size() * BUTTON_WIDTH / itemView.getWidth();
                    drawButtons(c, itemView, buffer, pos, translationX);
                }
            }

            super.onChildDraw(c, recyclerView, viewHolder, translationX, dY, actionState, isCurrentlyActive);
        }

        private synchronized void recoverSwipedItem() {
            while (!recoverQueue.isEmpty()) {
                int pos = recoverQueue.poll();
                if (pos > -1) {
                    if (recyclerView.getAdapter() != null)
                        recyclerView.getAdapter().notifyItemChanged(pos);
                }
            }
        }

        private void drawButtons(Canvas c, View itemView, List<com.hosnydev.quran.utils.SwipeHelper.UnderlayButton> buffer, int pos, float dX) {
            float right = itemView.getRight();
            float dButtonWidth = (-1) * dX / buffer.size();

            for (com.hosnydev.quran.utils.SwipeHelper.UnderlayButton button : buffer) {
                float left = right - dButtonWidth;
                button.onDraw(
                        c,
                        new RectF(
                                left,
                                itemView.getTop(),
                                right,
                                itemView.getBottom()
                        ),
                        pos
                );

                right = left;
            }
        }

        private void attachSwipe() {
            ItemTouchHelper itemTouchHelper = new ItemTouchHelper(this);
            itemTouchHelper.attachToRecyclerView(recyclerView);
        }

        public abstract void instantiateUnderlayButton(RecyclerView.ViewHolder viewHolder, List<com.hosnydev.quran.utils.SwipeHelper.UnderlayButton> underlayButtons);

        public static class UnderlayButton {
            private String text;
            private int color;
            private int pos;
            private Bitmap bitmap;
            private RectF clickRegion;
            private com.hosnydev.quran.utils.SwipeHelper.UnderlayButtonClickListener clickListener;

            public UnderlayButton(String text, Bitmap bitmap, int color, com.hosnydev.quran.utils.SwipeHelper.UnderlayButtonClickListener clickListener) {
                this.text = text;
                this.color = color;
                this.clickListener = clickListener;
                this.bitmap = bitmap;
            }

            boolean onClick(float x, float y) {
                if (clickRegion != null && clickRegion.contains(x, y)) {
                    clickListener.onClick(pos);
                    return true;
                }
                return false;
            }

            void onDraw(Canvas c, RectF rect, int pos) {
                Paint p = new Paint();

                // Draw background
                p.setColor(color);
                c.drawRect(rect, p);

                // Draw Text
                p.setColor(Color.WHITE);
                p.setTextSize(26);


                Rect r = new Rect();
                float cHeight = rect.height();
                float cWidth = rect.width();
                p.setTextAlign(Paint.Align.LEFT);
                p.getTextBounds(text, 0, text.length(), r);
                float x = cWidth / 2f - r.width() / 2f - r.left;
                float y = cHeight / 2f + r.height() / 2f - r.bottom;
                c.drawText(text, rect.left + x, rect.top + y, p);

                c.drawBitmap(bitmap, rect.left+x/2 - 1, rect.top+y/2 - 4, p);

                clickRegion = rect;
                this.pos = pos;
            }
        }

        public interface UnderlayButtonClickListener {
            void onClick(int pos);
        }
    }
